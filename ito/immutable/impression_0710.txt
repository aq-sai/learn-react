【immutable.js】
・元のものを変更するのでなく、元となっているものに何かしらの操作を加えた新しいものを生成する。
・ロジックをImmutable.jsで作ったモデルに置くことで、ActionやCallbackの無秩序な増加、Storeの肥大化を防ぐことが出来る(保守性の向上)。
・ActionやStoreのコード変更が減ることで、変更箇所が小さくなり、開発速度が上がる(開発効率の向上)。

【苦戦した点】
wantedlyのドキュメントを読んでいる際に、Immutable.jsは「直感的に理解しやすいコード」と書いてあり、
まずImmutable.jsが何者かさえあまりピンと来てもいなかったので、どういうことなのか理解できずに悩んでいました。
この点で苦戦しており、しばらく他の記事なども探してみましたがイメージが全くつかめずに悩んでいました。
一旦放置して公式のドキュメントを読んだり、サンプルコードを書いてみると、イメージや、
どう直感的に理解しやすいのかが見えた気がしました。


【スムーズに行けた点】
Immutable.jsの関数としてどんなものがあるのが見たり、サンプルのコーディングをしたりすると
今までに見たことのあるような関数や、分かりやすいものが多く、スムーズに使い方等を確認することができたように思います。
また、苦戦した点にも書いてありますが、一度公式のドキュメントを確認してから、理解できていなかった他のサイトの
ドキュメントを見てみると、理解が深まったように感じました。


